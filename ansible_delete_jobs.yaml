---
- name: Delete successful jobs from Ansible Tower for a specific template (Dry Run)
  hosts: localhost
  gather_facts: no
  vars:
    tower_host: "https://your_ansible_tower_url"  # Replace with your Ansible Tower URL
    tower_username: "your_username"              # Replace with your Ansible Tower username
    tower_password: "your_password"              # Replace with your Ansible Tower password
    job_template_id: 123                         # Replace with the specific job template ID
    dry_run: true                                 # Set to true for dry run, false for actual deletion

  tasks:
    - name: Get list of successful jobs for the specified job template
      uri:
        url: "{{ tower_host }}/api/v2/jobs/?status=successful&job_template={{ job_template_id }}"
        method: GET
        user: "{{ tower_username }}"
        password: "{{ tower_password }}"
        force_basic_auth: yes
        validate_certs: no
        return_content: yes
      register: job_response

    - name: Show jobs that would be deleted (Dry Run)
      debug:
        msg: "Dry run - Jobs to be deleted: {{ job_response.json.results | map(attribute='id') | list }}"
      when: dry_run | bool

    - name: Delete successful jobs (if dry run is off and item is not empty)
      uri:
        url: "{{ tower_host }}/api/v2/jobs/{{ item }}/"
        method: DELETE
        user: "{{ tower_username }}"
        password: "{{ tower_password }}"
        force_basic_auth: yes
        validate_certs: no
      loop: "{{ job_response.json.results | map(attribute='id') | list }}"
      when: not dry_run | bool
      ignore_errors: yes
      loop_control:
        loop_var: item
        condition: "{{ item is not none and item != '' }}"
      register: deleted_jobs

    - name: Report deleted jobs (Dry Run or Actual Deletion)
      debug:
        msg: "Deleted job with ID: {{ item }}"
      loop: "{{ deleted_jobs.results | map(attribute='item') | list }}"
      when: not dry_run | bool
